
*****
Setup
*****

Installation
============

This package is available on `PyPI <https://pypi.python.org/pypi/django-ajax-views/>`_.

.. code-block:: bash

    $ pip install django-ajax-views

Dependencies
------------

.. note:: Required dependencies are installed automatically. Install optional dependencies manually as needed.

`Django`_ >= 1.9
    MVC Web Framework
`django-require`_
    Used to simplify setup of RequireJS
`django-js-reverse`_
    Django's URL reverse in javascript
`django-crispy-forms`_ (TODO make optional)
    Integrating bootstrap into Django forms
`django-guardian`_ (optional)
    Object level permission handling
`django-extra-views`_ (optional)
    Formsets for class-based views
`django-autocomplete-light`_ == 2.3.3 (optional)
    Support for autocompletion


Django settings
===============

Add ``ajaxviews`` and dependencies to your ``INSTALLED_APPS``:

.. code-block:: python

    INSTALLED_APPS = [
        # ...
        'ajaxviews',
        'require',
        'django_js_reverse',
        'crispy_forms',
        # optional
        'guardian',
        'autocomplete_light',
    ]

To append the **JSON config script** and the **require main script** in your HTML body tag, add the middleware class
to your settings.

.. code-block:: python

    MIDDLEWARE_CLASSES = [
        # ...
        'ajaxviews.middleware.AjaxMiddleware',
    ]

django-ajax-views
-----------------

- ``DEFAULT_PAGINATE_BY``

    Default: ``30``

    If you use pagination for your *list views* you can override the default value.

- ``FILTER_SEARCH_INPUT_BY``

    Default: ``10``

    Number of results by which a search input field should be displayed for filter views.

- ``MESSAGE_TAGS``

    Default: ``{messages.ERROR: 'error'}``

    Set to ``danger`` for compatibility with bootstrap error tags.

- ``REQUIRE_MAIN_NAME``

    Default: ``main``

    Name of main js file.

django-crispy-forms
-------------------

- ``CRISPY_TEMPLATE_PACK``

    Default: ``'bootstrap'``

    Set the required template pack to ``'bootstrap3'``.

django-js-reverse
-----------------

- ``JS_REVERSE_OUTPUT_PATH``

    Default: ``<STATIC_ROOT>``

    Output path of the ``reverse.js`` file which is generated by Django management
    command ``collectstatic_js_reverse``.

.. django_js_reverse/

django-require
--------------

- ``REQUIRE_BASE_URL``

        Default: ``'js'``

        The baseUrl to pass to the r.js optimizer, relative to ``STATIC_ROOT``

- ``REQUIRE_JS``

        Default: ``'require.js'``

        The name of the require.js script used by your project, relative to ``REQUIRE_BASE_URL``.

- ``REQUIRE_BUILD_PROFILE``

        Default: ``None``

        The name of a build profile to use for your project, relative to ``REQUIRE_BASE_URL``.
        Leave blank to use the built-in default build profile if you do not want to build standalone modules.

- ``REQUIRE_STANDALONE_MODULES``

        Default: ``{}``

        A dictionary of standalone modules to build with almond.js used in production.

Configure RequireJS
===================

In JS root directory create a ``main.js`` file which is loaded by RequireJS. The module loading is handled by
`django-require`_'s templatetag ``require_module``. Place the following at the bottom of your base HTML template.

.. code-block:: django
   :caption: base.html
   :name: base html template

    {% load require %}
    {% require_module 'main' %}

In ``main.js`` define the paths to the javascript libraries and require these together with ``cs!app`` to
make them available throughout the whole application. I recommend setting up `NodeJS`_ and
`Bower`_ to manage all javascript dependencies.

.. code-block:: javascript
   :caption: main.js
   :name: requirejs main file
   :linenos:

    (function () {

      require.config({
        paths: {
          'cs':            '/path/to/require-cs/cs',
          'coffee-script': '/path/to/coffeescript/extras/coffee-script',
          'ajaxviews':     '/path/to/require-ajax-views/dist/ajaxviews',
          'domReady':      '/path/to/domReady/domReady',
          'jquery':        '/path/to/jquery/dist/jquery',
          'urlreverse':    '/path/to/django_js_reverse/reverse',
          'bootstrap':     '/path/to/bootstrap/dist/js/bootstrap.min'
        }
      });

      require(['domReady!'], function () {
        require([
          'jquery',
          'urlreverse',
          'bootstrap',
          'cs!app'
        ]);
      });

    })();

..
    // 'chosen',
    // 'datepicker',
    // 'confirmation',
    // 'autocomplete',
    // 'autocompletewidget',

Using the prefix ``cs!`` tells RequireJS to load a coffeescript file. The following initializes the
``ajaxviews.App`` and configures it to load all views and the middleware as coffeescript modules.
To execute a user defined ``middleware`` on every request specify the file name without extension
in the config.

.. code-block:: coffeescript
   :caption: app.coffee
   :name: client application
   :linenos:

    define ['ajaxviews'], (ajaxviews) ->
      App = ajaxviews.App

      App.config
        module:
          prefix: 'cs!'
        middleware: 'middleware'

      App.init()

.. example build profile for requirejs
   ___________________________________


.. _Django: https://github.com/django/django

.. _django-require: https://github.com/etianen/django-require

.. _django-jsonify: https://github.com/romgar/django-jsonify

.. _django-js-reverse: https://github.com/ierror/django-js-reverse

.. _django-crispy-forms: https://github.com/django-crispy-forms/django-crispy-forms

.. _django-guardian: https://github.com/django-guardian/django-guardian

.. _django-extra-views: https://github.com/AndrewIngram/django-extra-views

.. _django-autocomplete-light: https://github.com/yourlabs/django-autocomplete-light

.. _NodeJS: https://nodejs.org

.. _Bower: https://bower.io
