;(function() {
/*
 * require-ajax-views v1.0
 * https://github.com/Pyco7/django-ajax-views
 * Copyright (c) 2016 Emanuel Hafner
 * Licensed under the MIT License
 */
var cs, cs_manager, cs_app, cs_middleware, cs_utils, cs_view, cs_plugins_filterview;
(function (factory) {
  define(['jquery'], factory);
}(function ($) {
  'use strict';
  cs = {
    load: function (id) {
      throw new Error('Dynamic load not allowed: ' + id);
    }
  };
  // Generated by CoffeeScript 1.10.0
  (function () {
    var indexOf = [].indexOf || function (item) {
      for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item)
          return i;
      }
      return -1;
    };
    cs_manager = function () {
      var ViewManager;
      return ViewManager = function () {
        var Manager, _instance;
        function ViewManager() {
        }
        _instance = null;
        ViewManager.get = function (cfg) {
          return _instance != null ? _instance : _instance = new Manager(cfg);
        };
        Manager = function () {
          function Manager(cfg1) {
            this.cfg = cfg1;
            this.userMiddleware = {};
            if (!this.cfg) {
              throw 'View manager can not be initialized without config.';
            }
          }
          Manager.prototype.getJsonCfg = function (response) {
            if (response == null) {
              response = null;
            }
            if (response) {
              return JSON.parse($(response).find(this.cfg.html.cfgNode).html());
            } else {
              return JSON.parse($(this.cfg.html.cfgNode).html());
            }
          };
          Manager.prototype.getViewTypeMethod = function (viewType) {
            switch (false) {
            case viewType !== 'formView':
              return '_onFormLoad';
            case viewType !== 'detailView':
              return '_onDetailLoad';
            case viewType !== 'listView':
              return '_onListLoad';
            default:
              return null;
            }
          };
          Manager.prototype.getModuleName = function (viewName) {
            var mixin, ref, views;
            ref = this.cfg.mixins;
            for (mixin in ref) {
              views = ref[mixin];
              if (indexOf.call(views, viewName) >= 0) {
                return this.cfg.modules.mixinPath + mixin;
              }
            }
            return this.cfg.modules.viewPath + viewName;
          };
          Manager.prototype.requireModule = function (jsonCfg, callback) {
            var errorFunc, moduleName, viewFunc;
            this.debugInfo(jsonCfg);
            if (jsonCfg.ajax_view) {
              moduleName = this.getModuleName(jsonCfg.view_name);
              viewFunc = function (Module) {
                return callback(Module);
              };
              errorFunc = function (_this) {
                return function (error) {
                  if (_this.cfg.debug) {
                    return console.log('Debug: no module ' + moduleName + ' defined');
                  }
                };
              }(this);
              return require([this.cfg.modules.prefix + moduleName], viewFunc, errorFunc);
            } else {
              return callback(cs_view);
            }
          };
          Manager.prototype.debugInfo = function (jsonCfg) {
            if (jsonCfg == null) {
              jsonCfg = {};
            }
            if (this.cfg.debug) {
              if (jsonCfg.ajax_view) {
                console.log('Debug view:     init ' + jsonCfg.view_name + ' view');
              } else {
                console.log('Debug view:     no ajax view loaded');
              }
              return console.log('Debug response:', jsonCfg);
            }
          };
          Manager.prototype.updateView = function (scope, animate) {
            var node;
            if (animate == null) {
              animate = true;
            }
            node = $(this.cfg.html.ajaxNode).html($(scope).find(this.cfg.html.ajaxNode).html());
            if (animate) {
              return node.fadeIn('fast');
            }
          };
          Manager.prototype.updateModal = function (modalId, scope) {
            return $(modalId).find(this.cfg.html.modalNode).replaceWith($(scope).find(this.cfg.html.modalNode));
          };
          return Manager;
        }();
        return ViewManager;
      }();
    }();
  }.call(this));
  // Generated by CoffeeScript 1.10.0
  (function () {
    cs_app = function (ViewManager) {
      var AjaxApp;
      return AjaxApp = function () {
        function AjaxApp() {
        }
        AjaxApp._cfg = {
          html: {
            cfgNode: '#config',
            ajaxNode: '#ajax-content',
            modalNode: '.modal-dialog'
          },
          modules: {
            prefix: '',
            viewPath: 'views/',
            mixinPath: 'mixins/',
            middleware: ''
          },
          mixins: {},
          debug: false,
          defaults: { progressBar: { animationSpeed: 300 } }
        };
        AjaxApp.config = function (userCfg) {
          if (userCfg == null) {
            userCfg = {};
          }
          if (userCfg.html != null) {
            $.extend(this._cfg.html, userCfg.html);
          }
          if (userCfg.modules != null) {
            $.extend(this._cfg.modules, userCfg.modules);
          }
          if (userCfg.defaults != null) {
            $.extend(this._cfg.defaults, userCfg.defaults);
          }
          if (userCfg.mixins != null) {
            this._cfg.mixins = userCfg.mixins;
          }
          if (userCfg.debug != null) {
            return this._cfg.debug = userCfg.debug;
          } else if (typeof require === 'function' && typeof require.specified === 'function') {
            return this._cfg.debug = true;
          }
        };
        AjaxApp.init = function () {
          var jsonCfg, loadView, manager;
          manager = ViewManager.get(this._cfg);
          jsonCfg = manager.getJsonCfg();
          loadView = function () {
            return manager.requireModule(jsonCfg, function (View) {
              var Q, method, view;
              Q = function (selector) {
                return $(selector);
              };
              view = new View(Q, null);
              view.jsonCfg = jsonCfg;
              if (view.initMiddleware) {
                view.__onPageLoad();
                view.__onLoad();
                if (view._onPageLoad != null) {
                  view._onPageLoad();
                }
                if (view._onLoad != null) {
                  view._onLoad();
                }
                if (jsonCfg.init_view_type) {
                  method = manager.getViewTypeMethod(jsonCfg.init_view_type);
                  if (view[method] != null) {
                    view[method]();
                  }
                }
              }
              if (view.onPageLoad != null) {
                view.onPageLoad();
              }
              if (view.onLoad != null) {
                return view.onLoad();
              }
            });
          };
          if (this._cfg.modules.middleware) {
            /* amdclean */
            return require([this._cfg.modules.prefix + this._cfg.modules.middleware], function (middleware) {
              manager.userMiddleware = middleware;
              return loadView();
            });
          } else {
            return loadView();
          }
        };
        return AjaxApp;
      }();
    }(cs_manager);
  }.call(this));
  // Generated by CoffeeScript 1.10.0
  (function () {
    cs_middleware = function () {
      var middleware;
      return middleware = {
        onPageLoad: function () {
          var preview_data, preview_model_form;
          if (this.jsonCfg.preview_stage && this.jsonCfg.preview_stage === 2) {
            preview_data = {};
            preview_data['preview_stage'] = this.jsonCfg.preview_stage;
            preview_model_form = this.jsonCfg.preview_model_form;
            if (preview_model_form) {
              preview_data['preview_model_form'] = $(preview_model_form).formSerialize();
            }
            $('form[data-async]').ajaxForm({
              data: preview_data,
              success: function (_this) {
                return function (response) {
                  if (response.redirect != null) {
                    return location.href = response.redirect;
                  } else {
                    return console.log('replace form?');
                  }
                };
              }(this)
            });
            return $('.preview-back').click(function (_this) {
              return function (e) {
                e.preventDefault();
                return history.back();
              };
            }(this));
          }
        },
        onAjaxLoad: function () {
          var modalId;
          if (this.scopeName && this.scopeName.indexOf('#modal_nr') >= 0) {
            modalId = this.scopeName;
            this.Q('form[data-async]').ajaxForm({
              beforeSerialize: function (_this) {
                return function ($form, options) {
                  if (_this.onBeforeFormSerialize != null) {
                    return _this.onBeforeFormSerialize($form, options);
                  }
                };
              }(this),
              beforeSubmit: function (_this) {
                return function (arr, $form, options) {
                  if (_this.onBeforeFormSubmit != null) {
                    return _this.onBeforeFormSubmit(arr, $form, options);
                  }
                };
              }(this),
              success: function (_this) {
                return function (response) {
                  var key, ref, value;
                  if (response.success) {
                    _this.jsonCache.reload_view = true;
                    if (response.json_cache != null) {
                      ref = response.json_cache;
                      for (key in ref) {
                        value = ref[key];
                        _this.jsonCache[key] = value;
                      }
                    }
                    return $(modalId).modal('hide');
                  } else {
                    _this.jsonCfg = _this._manager.getJsonCfg(response);
                    _this._manager.updateModal(modalId, response);
                    return _this._loadAjaxView();
                  }
                };
              }(this)
            });
            $(modalId).find('form[data-async]').on('click', '.popover.confirmation a[data-apply=confirmation]', function (_this) {
              return function (e) {
                e.preventDefault();
                return $.get($(e.currentTarget).attr('href'), {}, function (response) {
                  var key, ref, value;
                  if (response.success) {
                    _this.jsonCache.reload_view = true;
                    if (response.json_cache != null) {
                      ref = response.json_cache;
                      for (key in ref) {
                        value = ref[key];
                        _this.jsonCache[key] = value;
                      }
                    }
                    return $(modalId).modal('hide');
                  } else {
                    throw 'Object deletion failed!';
                  }
                });
              };
            }(this));
            return $(modalId).on('hidden.bs.modal', function (_this) {
              return function (e) {
                var data, formNode, key, ref, ref1, subModalId, updateFormChoices, value;
                $(e.currentTarget).remove();
                updateFormChoices = function (form, choices) {
                  var field, fieldNode, pk, results;
                  results = [];
                  for (field in choices) {
                    pk = choices[field];
                    fieldNode = $(form).find('#id_' + field);
                    $(fieldNode).append('<option value="' + pk + '"></option>');
                    results.push($(fieldNode).val(pk).trigger('chosen:updated'));
                  }
                  return results;
                };
                if (_this.viewCache.modalNr) {
                  $('body').addClass('modal-open');
                  if (_this.jsonCache.reload_view) {
                    ref = _this.jsonCache;
                    for (key in ref) {
                      value = ref[key];
                      _this.viewCache.jsonCache[key] = value;
                    }
                    if (_this.jsonCache && _this._manager.cfg.debug) {
                      console.log('jsonCache ->', _this.jsonCache);
                    }
                    subModalId = _this.viewCache.scopeName;
                    formNode = $(subModalId).find('form[data-async]');
                    if ($(formNode).length) {
                      updateFormChoices(formNode, _this.jsonCache.select_choice);
                      data = $(formNode).formSerialize() + '&form_data=true';
                      return $.get($(formNode).attr('action'), data, function (response) {
                        _this._manager.updateModal(subModalId, response);
                        return _this.viewCache._loadAjaxView();
                      });
                    } else {
                      return $.get(_this.viewCache.jsonCfg.full_url, {}, function (response) {
                        _this._manager.updateModal(subModalId, response);
                        return _this.viewCache._loadAjaxView();
                      });
                    }
                  }
                } else if (_this.jsonCache.reload_view) {
                  ref1 = _this.jsonCache;
                  for (key in ref1) {
                    value = ref1[key];
                    _this.viewCache.jsonCache[key] = value;
                  }
                  if (_this.jsonCache && _this._manager.cfg.debug) {
                    console.log('jsonCache ->', _this.jsonCache);
                  }
                  updateFormChoices('form[data-async]', _this.jsonCache.select_choice);
                  if (_this.jsonCache.ajax_load) {
                    if (_this.viewCache.onAjaxLoad) {
                      return _this.viewCache.onAjaxLoad();
                    }
                  } else {
                    return _this.viewCache._initView(null, null, null, null);
                  }
                }
              };
            }(this));
          }
        },
        onLoad: function () {
          if (location.search && location.search.indexOf('next=') < 0) {
            history.replaceState({}, null, location.href.split('?')[0]);
          }
          if (this.Q('.modal-link').length) {
            this.Q('.modal-link:not(a)').on('mouseup', function (e) {
              if (e.which === 2) {
                return window.open($(this).attr('href'));
              }
            });
            this.Q('.modal-link').click(function (_this) {
              return function (e) {
                e.preventDefault();
                return _this.requestModal($(e.currentTarget).attr('href'));
              };
            }(this));
          }
          if (this.Q('.modal-link-cfg').length) {
            return this.Q('.modal-link-cfg').click(function (_this) {
              return function (e) {
                e.preventDefault();
                return _this.requestModal($(e.currentTarget).attr('href'), _this.jsonCfg);
              };
            }(this));
          }
        }
      };
    }();
  }.call(this));
  // Generated by CoffeeScript 1.10.0
  (function () {
    cs_utils = function () {
      var utils;
      return utils = {
        initModalLinks: function (scope) {
          return $(scope).find('.modal-link').click(function (_this) {
            return function (e) {
              e.preventDefault();
              return _this.requestModal($(e.currentTarget).attr('href'));
            };
          }(this));
        },
        initDateInput: function (element, opts) {
          var _opts, dateinput, i, len, ref, results;
          if (opts == null) {
            opts = {};
          }
          _opts = this._manager.cfg.defaults.dateWidget || {};
          $.extend(_opts, opts);
          ref = $(element).toArray();
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            dateinput = ref[i];
            if (!_opts.defaultViewDate) {
              _opts.defaultViewDate = $(dateinput).val() || '';
            }
            if ($(dateinput).parent().is('.input-group, .date')) {
              dateinput = $(dateinput).parent();
            }
            results.push($(dateinput).datepicker(_opts));
          }
          return results;
        },
        animateProgressBar: function () {
          var animateProgress, animationSpeed;
          if ($('#ajax-progress-bar').length) {
            animationSpeed = this._manager.cfg.defaults.progressBar.animationSpeed;
            animateProgress = function () {
              $(this).stop().width(0);
              if ($(this).data('stop-animate')) {
                return $(this).data('stop-animate', false);
              } else {
                return $(this).animate({ width: '100%' }, animationSpeed, 'swing', animateProgress);
              }
            };
            $('#ajax-progress-bar').slideDown('fast');
            return $('#ajax-progress-bar .progress-bar').each(animateProgress);
          }
        },
        stopProgressBar: function () {
          if ($('#ajax-progress-bar').length) {
            $('#ajax-progress-bar .progress-bar').data('stop-animate', true);
            return $('#ajax-progress-bar').slideUp('fast');
          }
        }
      };
    }();
  }.call(this));
  // Generated by CoffeeScript 1.10.0
  (function () {
    cs_view = function (ViewManager, appMiddleware, utils) {
      var View;
      return View = function () {
        function View(Q1, scopeName) {
          var method, name, ref;
          this.Q = Q1;
          this.scopeName = scopeName;
          this._manager = ViewManager.get();
          this.initMiddleware = true;
          this.viewCache = null;
          this.jsonCache = {};
          this.jsonCfg = {};
          this.modalNr = null;
          this.utils = {};
          for (name in utils) {
            method = utils[name];
            this.utils[name] = method.bind(this);
          }
          for (name in appMiddleware) {
            method = appMiddleware[name];
            this['__' + name] = method;
          }
          ref = this._manager.userMiddleware;
          for (name in ref) {
            method = ref[name];
            this['_' + name] = method;
          }
        }
        View.prototype._loadAjaxView = function () {
          var method;
          if (this.initMiddleware) {
            this.__onAjaxLoad();
            this.__onLoad();
            if (this._onAjaxLoad != null) {
              this._onAjaxLoad();
            }
            if (this._onLoad != null) {
              this._onLoad();
            }
            if (this.jsonCfg.init_view_type) {
              method = this._manager.getViewTypeMethod(this.jsonCfg.init_view_type);
              if (this[method] != null) {
                this[method]();
              }
            }
          }
          if (this.onAjaxLoad != null) {
            this.onAjaxLoad();
          }
          if (this.onLoad != null) {
            return this.onLoad();
          }
        };
        View.prototype._getRequestData = function (urlKwargs, jsonData) {
          var _jsonData, _urlKwargs, key, value;
          if (this.__requestContext != null) {
            _urlKwargs = this.__requestContext.getUrlKwargs != null ? this.__requestContext.getUrlKwargs() : {};
          } else {
            _urlKwargs = this.getUrlKwargs != null ? this.getUrlKwargs() : {};
          }
          $.extend(_urlKwargs, urlKwargs);
          for (key in _urlKwargs) {
            value = _urlKwargs[key];
            if (value == null) {
              delete _urlKwargs[key];
            }
          }
          if (this.__requestContext != null) {
            _jsonData = this.__requestContext.getJsonData != null ? this.__requestContext.getJsonData() : {};
          } else {
            _jsonData = this.getJsonData != null ? this.getJsonData() : {};
          }
          $.extend(_jsonData, jsonData);
          for (key in _jsonData) {
            value = _jsonData[key];
            if (value == null) {
              delete _jsonData[key];
            }
          }
          return [
            _urlKwargs,
            _jsonData
          ];
        };
        View.prototype._initRequest = function (viewName, urlKwargs, jsonData, callback) {
          var _jsonData, _urlKwargs, ref, url;
          ref = this._getRequestData(urlKwargs, jsonData), _urlKwargs = ref[0], _jsonData = ref[1];
          if (this._manager.cfg.debug) {
            console.log('Debug request: ', _urlKwargs, _jsonData);
          }
          url = null;
          if (this.modalNr) {
            if (this.Q('form[data-async]').length) {
              url = this.Q('form[data-async]').attr('action');
            } else if (this.jsonCfg.full_url != null) {
              url = this.jsonCfg.full_url;
            } else {
              throw 'Modal view has no form action and no full_url specified.';
            }
          } else {
            url = Urls[viewName || this.jsonCfg.view_name](_urlKwargs);
            if (location.hash) {
              if (url) {
                url += location.hash;
              } else {
                url = location.hash;
              }
            }
            if (url) {
              history.replaceState({}, null, url);
            }
          }
          if (url == null) {
            url = location.href;
          }
          return $.get(url, { 'json_cfg': JSON.stringify(_jsonData) }, function (response) {
            return callback(response);
          });
        };
        View.prototype._initView = function (viewName, urlKwargs, jsonData, animate) {
          if (viewName == null) {
            viewName = this.jsonCfg.view_name;
          }
          if (urlKwargs == null) {
            urlKwargs = {};
          }
          if (jsonData == null) {
            jsonData = {};
          }
          if (animate == null) {
            animate = true;
          }
          return this._initRequest(viewName, urlKwargs, jsonData, function (_this) {
            return function (response) {
              _this.jsonCfg = _this._manager.getJsonCfg(response);
              if (_this.jsonCfg.ajax_load) {
                _this._manager.updateView(response, animate);
                _this._manager.debugInfo(_this.jsonCfg);
                _this._loadAjaxView();
                return _this.utils.stopProgressBar();
              } else {
                if (_this._manager.cfg.debug) {
                  console.log('this should only happen if user session has expired');
                }
                return location.reload();
              }
            };
          }(this));
        };
        View.prototype.requestView = function (arg) {
          var _jsonData, _urlKwargs, animate, jsonData, module, pageLoad, ref, ref1, urlKwargs, viewName;
          ref = arg != null ? arg : {}, viewName = ref.viewName, urlKwargs = ref.urlKwargs, jsonData = ref.jsonData, pageLoad = ref.pageLoad, animate = ref.animate;
          if (viewName == null) {
            viewName = null;
          }
          if (urlKwargs == null) {
            urlKwargs = {};
          }
          if (jsonData == null) {
            jsonData = {};
          }
          if (pageLoad == null) {
            pageLoad = false;
          }
          if (animate == null) {
            animate = true;
          }
          this.utils.animateProgressBar();
          if (animate) {
            $(this._manager.cfg.html.ajaxNode).fadeOut('fast');
          }
          if (!viewName) {
            return this._initView(null, urlKwargs, jsonData, animate);
          } else if (pageLoad) {
            ref1 = this._getRequestData(urlKwargs, jsonData), _urlKwargs = ref1[0], _jsonData = ref1[1];
            return location.href = Urls[viewName](_urlKwargs) + '?json_cfg=' + JSON.stringify(_jsonData);
          } else {
            module = this._manager.getModuleName(viewName);
            return require([this._manager.cfg.modules.prefix + module], function (_this) {
              return function (View) {
                var Q, view;
                Q = function (selector) {
                  return $(this._manager.cfg.html.ajaxNode).find(selector);
                };
                view = new View(Q, _this._manager.cfg.html.ajaxNode);
                view.__requestContext = _this;
                view._initView(viewName, urlKwargs, jsonData, animate);
                return delete view.__requestContext;
              };
            }(this));
          }
        };
        View.prototype.requestSnippet = function (arg) {
          var callback, jsonData, ref, urlKwargs;
          ref = arg != null ? arg : {}, urlKwargs = ref.urlKwargs, jsonData = ref.jsonData, callback = ref.callback;
          if (urlKwargs == null) {
            urlKwargs = {};
          }
          if (jsonData == null) {
            jsonData = {};
          }
          return this._initRequest(null, urlKwargs, jsonData, function (_this) {
            return function (response) {
              return callback(response);
            };
          }(this));
        };
        View.prototype.requestModal = function (href, jsonData) {
          var data;
          if (jsonData == null) {
            jsonData = null;
          }
          if (this._manager.cfg.debug) {
            console.log('Debug request: ', href, jsonData);
          }
          data = {
            'modal_id': '#modal_nr' + parseInt(this.modalNr + 1) || '#modal_nr1',
            'json_cfg': jsonData ? JSON.stringify(jsonData) : void 0
          };
          return $.get(href, data, function (_this) {
            return function (response) {
              var jsonCfg;
              $('body').append($(response).find('.modal')[0].outerHTML);
              $(data.modal_id).modal('toggle');
              jsonCfg = _this._manager.getJsonCfg(response);
              return _this._manager.requireModule(jsonCfg, function (View) {
                var Q, view;
                Q = function (selector) {
                  return $(data.modal_id).find(selector);
                };
                view = new View(Q, data.modal_id);
                view.viewCache = _this;
                view.modalNr = _this.modalNr + 1 || 1;
                view.jsonCfg = jsonCfg;
                return view._loadAjaxView();
              });
            };
          }(this));
        };
        return View;
      }();
    }(cs_manager, cs_middleware, cs_utils);
  }.call(this));
  // Generated by CoffeeScript 1.10.0
  (function () {
    var extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
    cs_plugins_filterview = function (View) {
      var FilterView;
      return FilterView = function (superClass) {
        extend(FilterView, superClass);
        function FilterView() {
          return FilterView.__super__.constructor.apply(this, arguments);
        }
        FilterView.prototype.getJsonData = function () {
          var selectedFilterIndex, sortIndex;
          selectedFilterIndex = this.jsonCfg.selected_filter_index;
          sortIndex = this.jsonCfg.sort_index;
          return {
            'selected_filter_index': selectedFilterIndex || selectedFilterIndex === 0 ? selectedFilterIndex : void 0,
            'selected_filter_values': this.jsonCfg.selected_filter_values ? this.jsonCfg.selected_filter_values : void 0,
            'sort_index': sortIndex || sortIndex === 0 ? sortIndex : void 0,
            'sort_order': sortIndex || sortIndex === 0 ? this.jsonCfg.sort_order : void 0
          };
        };
        FilterView.prototype.onPageLoad = function () {
          var requestSearchInput;
          if (localStorage.getItem('popover_hide_lock')) {
            localStorage.removeItem('popover_hide_lock');
          }
          $('body').click(function (e) {
            if ($('.popover').length) {
              if (!localStorage.getItem('popover_hide_lock')) {
                $('th[data-filter-index] > span:first-of-type').each(function () {
                  if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
                    return $(this).popover('hide');
                  }
                });
              }
              if (!$('.datepicker-dropdown').length) {
                return localStorage.removeItem('popover_hide_lock');
              }
            }
          });
          if ($('#default-search-form').length) {
            requestSearchInput = function (_this) {
              return function () {
                var res;
                if ($('#default-search-form #id_value').val()) {
                  _this.requestView({
                    jsonData: {
                      'selected_filter_index': $('#default-search-form #id_value').data('filter-index'),
                      'selected_filter_values': function () {
                        var i, len, ref, results;
                        ref = $('.yourlabs-autocomplete span');
                        results = [];
                        for (i = 0, len = ref.length; i < len; i++) {
                          res = ref[i];
                          results.push($(res).text());
                        }
                        return results;
                      }()
                    }
                  });
                } else {
                  _this.requestView({
                    jsonData: {
                      'selected_filter_index': null,
                      'selected_filter_values': null
                    }
                  });
                }
                $('#default-search-form #id_value').val('');
                return $('.yourlabs-autocomplete').remove();
              };
            }(this);
            $('#default-search-form').submit(function () {
              requestSearchInput();
              return false;
            });
            $('#default-search-form #submit-search').click(function () {
              return requestSearchInput();
            });
            return $('#default-search-form #id_value').yourlabsAutocomplete().input.bind('selectChoice', function (e, choice, autocomplete) {
              return location.href = Urls[$(this).data('detail-view-name')](choice.attr('data-value'));
            });
          }
        };
        FilterView.prototype.onAjaxLoad = function () {
          var filterIndex;
          filterIndex = this.jsonCfg.selected_filter_index;
          if (filterIndex || filterIndex === 0) {
            return $('th[data-filter-index=\'' + filterIndex + '\']').find('> span:first-of-type').css('text-decoration', 'underline');
          }
        };
        FilterView.prototype.onLoad = function () {
          var popover_node;
          this.Q('.table-sort').click(function (_this) {
            return function (e) {
              var data, sort_order;
              data = { 'sort_index': $(e.currentTarget).parent().data('filter-index') };
              sort_order = $(e.currentTarget).data('sort');
              if (!sort_order || sort_order === 'None') {
                data['sort_order'] = 'asc';
              } else if (sort_order === 'asc') {
                data['sort_order'] = 'desc';
              } else {
                data = {
                  'sort_index': null,
                  'sort_order': null
                };
              }
              return _this.requestView({ jsonData: data });
            };
          }(this));
          popover_node = 'th[data-filter-index] > span:first-of-type';
          $(popover_node).popover({
            title: 'Filter Options <button type="button" class="close" aria-hidden="true">&times;</button>',
            html: true,
            content: '<i>Loading ...</i>',
            placement: 'bottom'
          });
          $(popover_node).on('shown.bs.popover', function (e) {
            return $('.popover-title button').click(function () {
              return $(e.currentTarget).popover('hide');
            });
          });
          return $(popover_node).on('show.bs.popover', function (_this) {
            return function (e) {
              var filterIndex, popover;
              popover = $(e.currentTarget).data('bs.popover');
              filterIndex = parseInt($(e.currentTarget).parent().data('filter-index'));
              return _this.requestSnippet({
                jsonData: {
                  'filter_index': filterIndex,
                  'ignore_selected_values': filterIndex !== _this.jsonCfg.selected_filter_index ? true : void 0
                },
                callback: function (response) {
                  var inputNode, scope;
                  scope = popover.tip().find('.popover-content');
                  $(scope).html(response);
                  $(scope).find('#filter_reset').click(function (e) {
                    return _this.requestView({
                      jsonData: {
                        'selected_filter_index': null,
                        'selected_filter_values': []
                      }
                    });
                  });
                  if ($(scope).find('.input-daterange').length) {
                    inputNode = $(scope).find('.input-daterange input').on('show', function () {
                      return localStorage.setItem('popover_hide_lock', true);
                    });
                    $(inputNode).datepicker({
                      format: 'yyyy-mm-dd',
                      autoclose: true,
                      calendarWeeks: true,
                      todayHighlight: true,
                      todayBtn: true,
                      weekStart: 1
                    });
                    return $(scope).find('#filter_submit').click(function (e) {
                      return _this.requestView({
                        jsonData: {
                          'selected_filter_index': filterIndex,
                          'selected_filter_values': {
                            'min_date': $(scope).find('.input-daterange input:first-of-type').val(),
                            'max_date': $(scope).find('.input-daterange input:last-of-type').val()
                          }
                        }
                      });
                    });
                  } else if ($(scope).find('input[type="radio"]').length) {
                    return $(scope).find('input:radio').change(function (e) {
                      var data, filterValue;
                      filterValue = $(e.currentTarget).val();
                      if (!filterValue || filterValue === 'all') {
                        data = {
                          'selected_filter_index': null,
                          'selected_filter_values': []
                        };
                      } else {
                        data = {
                          'selected_filter_index': filterIndex,
                          'selected_filter_values': filterValue
                        };
                      }
                      return _this.requestView({ jsonData: data });
                    });
                  } else {
                    $(scope).find('#select-all').click(function (e) {
                      return $(scope).find('input[type="checkbox"]').prop('checked', 'checked');
                    });
                    $(scope).find('#deselect-all').click(function (e) {
                      return $(scope).find('input[type="checkbox"]').prop('checked', false);
                    });
                    $(scope).find('input[type=text]').keyup(function (e) {
                      var searchString;
                      if (e.keyCode === 13) {
                        $('#filter_submit').click();
                        return;
                      }
                      searchString = e.currentTarget.value;
                      if (searchString != null ? searchString.length : void 0) {
                        $(scope).find('label.checkbox:containsCaseInsensitive(\'' + searchString + '\')').fadeIn('fast');
                        return $(scope).find('label.checkbox:not(:containsCaseInsensitive(\'' + searchString + '\'))').fadeOut('fast');
                      } else {
                        return $(scope).find('label.checkbox').fadeOut('fast');
                      }
                    });
                    return $(scope).find('#filter_submit').click(function (e) {
                      var data, values_list;
                      values_list = [];
                      $(scope).find('input[type="checkbox"]:checked:visible').each(function () {
                        return values_list.push($(this).val());
                      });
                      if (values_list.length === 0) {
                        data = {
                          'selected_filter_index': null,
                          'selected_filter_values': []
                        };
                      } else {
                        data = {
                          'selected_filter_index': filterIndex,
                          'selected_filter_values': values_list
                        };
                      }
                      return _this.requestView({ jsonData: data });
                    });
                  }
                }
              });
            };
          }(this));
        };
        return FilterView;
      }(View);
    }(cs_view);
  }.call(this));
  function extendjs(_super) {
    var __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
    function JsView() {
      return JsView.__super__.constructor.apply(this, arguments);
    }
    __extends(JsView, _super);
    return JsView;
  }
  return {
    App: cs_app,
    View: cs_view,
    FilterView: cs_plugins_filterview,
    extendjs: extendjs
  };
}));
}());